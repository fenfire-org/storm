# 
# Copyright (c) 2003, Benja Fallenstein
# 
# This file is part of Storm.
# 
# Storm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# Storm is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
# 
# You should have received a copy of the GNU General
# Public License along with Storm; if not, write to the Free
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA  02111-1307  USA
# 
# 

import java, org

execfile("org/nongnu/storm/IndexedPool.meta")

def maps():
    return 2 * [org.nongnu.storm.impl.p2p.MockP2PMap()]

def Pool(indexTypes):
    set = java.util.HashSet()
    for el in indexTypes: set.add(el)

    map1, map2 = maps()

    pub = org.nongnu.storm.impl.TransientPool(set)
    cache1 = org.nongnu.storm.impl.TransientPool(set)
    peer1 = org.nongnu.storm.impl.p2p.Peer(pub, cache1, map1)

    cache2 = org.nongnu.storm.impl.TransientPool(set)
    peer2 = org.nongnu.storm.impl.p2p.Peer(pub, cache2, map2)

    return TestPool(peer2.getPool(), pub, cache2, peer1)

class TestPool(org.nongnu.storm.IndexedPool):
    """
    A pool for testing that dispatches calls to a 'read from'
    and a 'write to' pool-- that way, we can test p2p.
    """

    def __init__(self, read, write, cache, peer):
        self.read, self.write, self.cache = read, write, cache
        self.peer = peer

    def get(self, id):
        return self.read.get(id)

    def request(self, id, listener):
        return self.read.request(id, listener)

    def request(self, id):
        return self.read.request(id)

    def add(self, block):
        self.write.add(block)
        self.peer.publish()

    def delete(self, block):
        id = block.getId()
        try:
            self.cache.delete(self.cache.get(id))
        except java.io.FileNotFoundException:
            pass

        self.write.delete(self.write.get(id))

        try:
            self.read.get(id)
        except java.io.FileNotFoundException:
            pass
        else: print "AAAAAARGH!!!!"

        self.peer.publish()

    def getIds(self):
        # self.read.getIds() would not work
        # because a P2P pool has no way to
        # determine *all* the ids it can retrieve...
        return self.write.getIds()

    def getBlockOutputStream(self, contentType):
        bos = self.write.getBlockOutputStream(contentType)
        return MyBlockOutputStream(bos, self.peer)

    def getIndex(self, typeURI):
        return self.read.getIndex(typeURI)

    def getIndices(self):
        return self.read.getIndices()

    def getIndexTypes(self):
        return self.read.getIndexTypes()

    
class MyBlockOutputStream(org.nongnu.storm.BlockOutputStream):
    def __init__(self, stream, peer):
        org.nongnu.storm.BlockOutputStream.__init__(self, stream, stream.getContentType())
        self.stream = stream
        self.peer = peer
        
    def __getattr__(self, attr):
        #print "getattr: MyBlockOutputStream.%s" % attr
        return getattr(self.stream, attr)

    def close(self):
        #print "MyBlockOutputStream.close()"
        self.stream.close()
        self.peer.publish()
